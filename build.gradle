/**
 * 声明 gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
 * gradle是由groovy语言编写的，支持groovy语法，可以灵活的使用已有的各种ant插件、基于jvm的类库，
 * 这也是它比maven、 ant等构建脚本强大的原因。虽然gradle支持开箱即用，但是如果你想在脚本中使用一些第三方的插件、类库等，
 * 就需要自己手动添加对这些插件、类库的 引用。而这些插件、类库又不是直接服务于项目的，而是支持其它build脚本的运行。
 * 所以你应当将这部分的引用放置在buildscript代码块中。 gradle在执行脚本时，会优先执行buildscript代码块中的内容，
 * 然后才会执行剩余的build脚本。
 */
buildscript {
    /**
     * 指定所使用仓库的路径
     * mavenCentral()，中央仓库，项目中所使用的jar包都会从中央仓库下载到本地仓库。
     *                 若本地仓库已经拥有相应的jar包，则不会重复下载
     *                 可以使用命令maven { url "http://maven.aliyun.com/nexus/content/groups/public" }指定maven的远程仓库地址
     * mavenLocal()本地仓库，与GRADLE_USER_HOME配置的路径一致。
     * */
    repositories{
        mavenLocal()
        maven {url "https://maven.aliyun.com/nexus/content/groups/public/"}
        mavenCentral()
    }
    //定义全局变量
    ext{
        //指定springboot 版本
        springBootVersion='2.1.3.RELEASE'
    }
    /**
     * gradle所有的jar包文件坐标都在dependencies属性内放置
     * 每一个jar包都具备以下特点
     * 1.scope（作用域）：gradle支持compile、runtime、testCompile、testRuntime四种scope
     *   compile：jar包在编译期与运行期依赖。
     *   runtime：jar包在运行期依赖。
     *   testCompile：jar包在测试编译期与运行期依赖。
     *   testRuntime：jar包在测试运行期依赖。
     *   补充：
     *   providedCompile：jar包/依赖代码 仅在编译的时候需要，但是在运行时不需要依赖。
     *   providedCompile与compile,runtime区别：
     *   compile: 前提：apply plugin: 'war'或者apply plugin: 'java'
     *   providedCompile:前提：apply plugin: 'war'，若前提为'java',则使用compileOnly
     *   runtime:前提：apply plugin: 'war'
     *   以上所说的前提，如果不正确配置的话，就会遇到依赖包无法导入，以及runtime以及providedCompile无法使用的情况。
     * 2. group:与maven的groupId一致。
     *    name:与maven的artifactId一致。
     *    version:与maven的version一致。
     */
    dependencies{
        //引入springboot gradle 插件
        classpath"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }

}
/**
 * 引入所有模块的配置，包括父模块 gradle-demo，子模块gradle-core，gradle-utils
 */
allprojects {
    //创建项目输入groupId
    group 'org.example'
    //创建项目所输入的版本
    version '1.0-SNAPSHOT'
    //指定运行环境，java
    apply plugin: 'java'
    //指定ide环境，idea
    apply plugin: 'idea'
    //定义全局变量
    ext{
        //指定springboot 版本
        springBootVersion='2.1.3.RELEASE'
    }
}

//dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//}
/**
 * 引入所有子模块的配置，包括子模块gradle-core，gradle-utils
 */
subprojects {
    //引入spring 依赖管理插件
    apply plugin: 'io.spring.dependency-management'
    //引入springboot 插件
    apply plugin: 'org.springframework.boot'
    //指定编译编译.java文件的jdk版本
    sourceCompatibility = 1.8
    //确保class文件与targetCompatibility指定版本，或者更新的java虚拟机兼容
    targetCompatibility = 1.8
    //指定gradle编译时，针对java文件使用 UTF-8 编码
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    /**
     * 指定子模块所使用仓库的路径
     * */
    repositories {
        mavenLocal()
        maven{url "https://maven.aliyun.com/nexus/content/groups/public"}
        mavenCentral()
    }
    /**
     * 引入之模块jar包
     */
    dependencies {
        //引入log4j
        compile 'org.slf4j:slf4j-api:1.7.25'
        //引入Junit 单元测试
        testCompile 'junit:junit:4.12'
        //引入springboot start test
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

}
